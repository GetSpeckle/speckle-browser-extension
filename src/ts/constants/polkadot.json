{
  "chain": "Polkadot",
  "color": "#e6007a",
  "genesisHash": "0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3",
  "icon": "polkadot",
  "metaCalls": "",
  "specVersion": 23,
  "ss58Format": 0,
  "tokenDecimals": 10,
  "tokenSymbol": "DOT",
  "types": {
    "Address": "AccountId",
    "Keys": "SessionKeys5",
    "LookupSource": "AccountId",
    "ProxyType": {
      "_enum": [
        "Any",
        "NonTransfer",
        "Governance",
        "Staking",
        "Unused",
        "IdentityJudgement"
      ]
    }
  }
}
