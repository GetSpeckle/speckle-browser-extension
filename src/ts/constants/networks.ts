import { Chain, Polkadot, Kusama } from './chains'
import { Metadata, TypeRegistry } from '@polkadot/types'
import { Registry } from '@polkadot/types/types'
import { IdenticonTheme, PolkadotIdenticon } from './identicon-theme'

export type Network = {
  name: string,
  chain: Chain,
  genesisHash: string,
  specVersion: number,
  ss58Format?: number,
  tokenDecimals?: number,
  tokenSymbol?: string,
  registry: Registry,
  hasMetadata: boolean,
  rpcServer: string,
  types: {},
  txExplorer: string,
  identiconTheme: IdenticonTheme
}

const kusama = {
  name: 'Kusama',
  chain: Kusama,
  genesisHash: '0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe',
  specVersion: 1055,
  ss58Format: 2,
  tokenDecimals: 12,
  tokenSymbol: 'KSM',
  types: {
    Address: 'AccountId',
    Keys: 'SessionKeys5'
  },
  rpcServer: 'wss://kusama-rpc.polkadot.io/',
  txExplorer: 'https://polkascan.io/pre/kusama-cc3/transaction/',
  identiconTheme: PolkadotIdenticon,
  // tslint:disable-next-line:max-line-length
  metaCalls: ''
}

export const DEFUALT_NETWORK = kusama.name

export const networksMap: Map<string, Network> = new Map(
  // tslint:disable-next-line:max-line-length
  [kusama].map(({ name, chain, genesisHash, metaCalls, specVersion, ss58Format, tokenDecimals, tokenSymbol, types, rpcServer, txExplorer, identiconTheme }): [string, Network] => {
    let metadata: Metadata | undefined
    const registry = new TypeRegistry()
    registry.register(types || {})

    if (metaCalls) {
      metadata = new Metadata(registry, Buffer.from(metaCalls, 'base64'))
    }

    return [genesisHash, {
      genesisHash,
      hasMetadata: !!metadata,
      chain,
      types,
      name,
      registry,
      specVersion,
      ss58Format,
      tokenDecimals,
      tokenSymbol,
      rpcServer,
      txExplorer,
      identiconTheme
    }]
  })
)

let byName = {}
networksMap.forEach(network => { byName[network.name] = network })
export const networks: {[name: string]: Network} = byName

const UNKNOWN_NETWORK: Network = {
  hasMetadata: false,
  chain: Polkadot,
  genesisHash: '',
  name: 'Unknown network',
  registry: new TypeRegistry(),
  specVersion: 0,
  ss58Format: 42,
  tokenDecimals: 0,
  types: {},
  tokenSymbol: 'UNIT',
  rpcServer: '',
  txExplorer: '',
  identiconTheme: 'empty'
}

export function findNetwork (genesisHash?: string | null): Network {
  return networksMap.get(genesisHash || '') || UNKNOWN_NETWORK
}
