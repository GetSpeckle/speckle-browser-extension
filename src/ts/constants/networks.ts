import { Chain, Polkadot, Edgeware } from './chains'
import { IdentityTypes } from 'edgeware-node-types/dist/identity'
import { SignalingTypes } from 'edgeware-node-types/dist/signaling'
import { TreasuryRewardTypes } from 'edgeware-node-types/dist/treasuryReward'
import { VotingTypes } from 'edgeware-node-types/dist/voting'
import { Metadata } from '@polkadot/types'

export type Network = {
  name: string,
  chain: Chain,
  genesisHash: string,
  specVersion: number,
  ss58Format?: number,
  tokenDecimals?: number,
  tokenSymbol?: string,
  types?: any,
  rpcServer: string,
  txExplorer: string,
  meta?: Metadata
}

export const Alexander: Network = {
  name: 'Alexander',
  chain: Polkadot,
  genesisHash: '0xdcd1346701ca8396496e52aa2785b1748deb6db09551b72159dcb3e08991025b',
  specVersion: 112,
  ss58Format: 42,
  tokenDecimals: 15,
  tokenSymbol: 'DOT',
  types: {},
  rpcServer: 'wss://poc3-rpc.polkadot.io/',
  txExplorer: 'https://polkascan.io/pre/alexander/system/extrinsic/',
  // tslint:disable-next-line:max-line-length
  meta: new Metadata(Buffer.from('', 'base64'))
}

export const Kusama: Network = {
  name: 'Kusama CC2',
  chain: Polkadot,
  genesisHash: '0xe3777fa922cafbff200cadeaea1a76bd7898ad5b89f7848999058b50e715f636',
  specVersion: 1003,
  ss58Format: 2,
  tokenDecimals: 12,
  tokenSymbol: 'KSM',
  types: {
    Keys: 'SessionKeysPolkadot'
  },
  rpcServer: 'wss://kusama-rpc.polkadot.io/',
  txExplorer: 'https://polkascan.io/pre/kusama/extrinsic',
  // tslint:disable-next-line:max-line-length
  meta: new Metadata(Buffer.from('', 'base64'))
}

export const Testnet: Network = {
  name: 'Edgeware',
  chain: Edgeware,
  genesisHash: '0xda60008770287b5eb4f9b5241317ac4c7e42c3c3d8e85fbbfa2a88705394d75e',
  specVersion: 20,
  ss58Format: 42,
  tokenDecimals: 18,
  tokenSymbol: 'EDG',
  types: {
    Keys: 'SessionKeysSubstrate',
    ...IdentityTypes,
    ...SignalingTypes,
    ...TreasuryRewardTypes,
    ...VotingTypes
  },
  rpcServer: 'wss://testnode.edgewa.re/',
  txExplorer: 'https://polkascan.io/pre/edgeware-testnet/system/extrinsic/',
  meta: new Metadata(Buffer.from('', 'base64'))
}

export const chains: {[chainType: string]: Array<Network>} = {
  [Polkadot.chainType]: [Alexander, Kusama],
  [Edgeware.chainType]: [Testnet]
}

export const networks: {[name: string]: Network} = {
  [Alexander.name]: Alexander,
  [Kusama.name]: Kusama,
  [Testnet.name]: Testnet
}

export const findNetwork = (genesisHash: string): Network => {
  const matchedNetworks = Object.values(networks).filter(
    network => network.genesisHash === genesisHash)
  if (matchedNetworks.length === 1) return matchedNetworks[0]
  throw new Error('network cannot be found!')
}
